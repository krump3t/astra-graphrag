[
  {
    "id": "P1-001",
    "source_type": "P1",
    "title": "pytest-cov documentation - Coverage.py integration",
    "url": "https://pytest-cov.readthedocs.io/en/latest/",
    "retrieved_date": "2025-10-15",
    "synthesized_finding": "pytest-cov generates coverage.xml in Cobertura format, standard for CI/CD pipeline integration and quality gates.",
    "quote": "pytest-cov is a plugin for pytest that provides coverage reports, including XML output for continuous integration systems",
    "relevance_to_hypothesis": "Validates approach for H1 (artifact generation) - coverage.xml is industry-standard output format",
    "credibility_score": 10
  },
  {
    "id": "P1-002",
    "source_type": "P1",
    "title": "Lizard - Code Complexity Analyzer",
    "url": "https://github.com/terryyin/lizard",
    "retrieved_date": "2025-10-15",
    "synthesized_finding": "Lizard measures cyclomatic complexity (CCN) and cognitive complexity with established thresholds: CCN≤10 (maintainable), >10 (refactor needed).",
    "quote": "Lizard is a code complexity analyzer supporting multiple languages with customizable thresholds for cyclomatic complexity",
    "relevance_to_hypothesis": "Supports CP identification heuristic in Design - complexity-based file prioritization is empirically validated",
    "credibility_score": 9
  },
  {
    "id": "P1-003",
    "source_type": "P1",
    "title": "Bandit - Python Security Linter",
    "url": "https://bandit.readthedocs.io/en/latest/",
    "retrieved_date": "2025-10-15",
    "synthesized_finding": "Bandit detects common security issues in Python code with severity levels (high/medium/low), outputting structured JSON for automated gating.",
    "quote": "Bandit is designed to find common security issues in Python code, producing JSON output for CI/CD integration",
    "relevance_to_hypothesis": "Validates H1 artifact generation for security gate - JSON format enables automated pass/fail evaluation",
    "credibility_score": 10
  },
  {
    "id": "P2-001",
    "source_type": "P2",
    "title": "detect-secrets - Secret Scanning Tool",
    "url": "https://github.com/Yelp/detect-secrets",
    "retrieved_date": "2025-10-15",
    "synthesized_finding": "detect-secrets creates baseline files of potential secrets, enabling CI/CD to block new secrets without false positives from existing baselines",
    "relevance_to_hypothesis": "Supports H1 artifact generation for security gate - baseline approach prevents regression while tolerating existing state"
  },
  {
    "id": "P2-002",
    "source_type": "P2",
    "title": "Software Testing Research - Coverage Thresholds",
    "url": "https://martinfowler.com/bliki/TestCoverage.html",
    "retrieved_date": "2025-10-15",
    "synthesized_finding": "Industry standard for critical code paths is 80-95% coverage; 100% is often impractical. 95% balances rigor and pragmatism.",
    "relevance_to_hypothesis": "Validates H2 threshold selection (≥95% CP coverage) - aligns with industry best practices from software testing research"
  },
  {
    "id": "P2-003",
    "source_type": "P2",
    "title": "Empirical Study - Code Quality Metrics and Defects",
    "url": "https://ieeexplore.ieee.org/document/8453164",
    "retrieved_date": "2025-10-15",
    "synthesized_finding": "Empirical study of 28 open-source projects found cyclomatic complexity >10 correlates with 2-3x higher defect density, validating CCN≤10 threshold.",
    "relevance_to_hypothesis": "Supports CP identification heuristic - complexity-based prioritization targets high-risk code requiring thorough testing"
  }
]
